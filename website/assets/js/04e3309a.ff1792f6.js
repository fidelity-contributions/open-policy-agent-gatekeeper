"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[75636],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>y});var a=t(96540);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function r(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?r(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,i=function(e,n){if(null==e)return{};var t,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||(i[t]=e[t]);return i}(e,n);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)t=r[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(i[t]=e[t])}return i}var s=a.createContext({}),c=function(e){var n=a.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=c(e.components);return a.createElement(s.Provider,{value:n},e.children)},d={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},g=a.forwardRef((function(e,n){var t=e.components,i=e.mdxType,r=e.originalType,s=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),g=c(t),y=i,u=g["".concat(s,".").concat(y)]||g[y]||d[y]||r;return t?a.createElement(u,o(o({ref:n},p),{},{components:t})):a.createElement(u,o({ref:n},p))}));function y(e,n){var t=arguments,i=n&&n.mdxType;if("string"==typeof e||i){var r=t.length,o=new Array(r);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l.mdxType="string"==typeof e?e:i,o[1]=l;for(var c=2;c<r;c++)o[c]=t[c];return a.createElement.apply(null,o)}return a.createElement.apply(null,t)}g.displayName="MDXCreateElement"},1043:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>y,frontMatter:()=>l,metadata:()=>c,toc:()=>d});var a=t(58168),i=t(98587),r=(t(96540),t(15680)),o=["components"],l={id:"sync",title:"Replicating Data"},s=void 0,c={unversionedId:"sync",id:"version-v3.18.x/sync",title:"Replicating Data",description:"Replicating Data",source:"@site/versioned_docs/version-v3.18.x/sync.md",sourceDirName:".",slug:"/sync",permalink:"/gatekeeper/website/docs/v3.18.x/sync",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper/edit/master/website/versioned_docs/version-v3.18.x/sync.md",tags:[],version:"v3.18.x",frontMatter:{id:"sync",title:"Replicating Data"},sidebar:"docs",previous:{title:"Handling Constraint Violations",permalink:"/gatekeeper/website/docs/v3.18.x/violations"},next:{title:"Exempting Namespaces",permalink:"/gatekeeper/website/docs/v3.18.x/exempt-namespaces"}},p={},d=[{value:"Replicating Data",id:"replicating-data",level:2},{value:"Replicating Data with SyncSets (Recommended)",id:"replicating-data-with-syncsets-recommended",level:3},{value:"Working with SyncSet resources",id:"working-with-syncset-resources",level:4},{value:"Replicating Data with Config",id:"replicating-data-with-config",level:3},{value:"Working with Config resources",id:"working-with-config-resources",level:4},{value:"Accessing replicated data",id:"accessing-replicated-data",level:3},{value:"Auditing From Cache",id:"auditing-from-cache",level:3}],g={toc:d};function y(e){var n=e.components,t=(0,i.A)(e,o);return(0,r.yg)("wrapper",(0,a.A)({},g,t,{components:n,mdxType:"MDXLayout"}),(0,r.yg)("h2",{id:"replicating-data"},"Replicating Data"),(0,r.yg)("p",null,"Some constraints are impossible to write without access to more state than just the object under test. For example, it is impossible to know if a label is unique across all pods and namespaces unless a ConstraintTemplate has access to all other pods and namespaces. To enable this use case, we provide syncing of data into a data client."),(0,r.yg)("h3",{id:"replicating-data-with-syncsets-recommended"},"Replicating Data with SyncSets (Recommended)"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Feature State"),": Gatekeeper version v3.15+ (alpha)"),(0,r.yg)("p",null,"Kubernetes data can be replicated into the data client using ",(0,r.yg)("inlineCode",{parentName:"p"},"SyncSet")," resources. Below is an example of a ",(0,r.yg)("inlineCode",{parentName:"p"},"SyncSet"),":"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: syncset.gatekeeper.sh/v1alpha1\nkind: SyncSet\nmetadata:\n  name: syncset-1\nspec:\n  gvks:\n    - group: ""\n      version: "v1"\n      kind: "Namespace"\n    - group: ""\n      version: "v1"\n      kind: "Pod"\n')),(0,r.yg)("p",null,"The resources defined in the ",(0,r.yg)("inlineCode",{parentName:"p"},"gvks")," field of a SyncSet will be eventually synced into the data client."),(0,r.yg)("h4",{id:"working-with-syncset-resources"},"Working with SyncSet resources"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Updating a SyncSet's ",(0,r.yg)("inlineCode",{parentName:"li"},"gvks")," field should dynamically update what objects are synced."),(0,r.yg)("li",{parentName:"ul"},"Multiple ",(0,r.yg)("inlineCode",{parentName:"li"},"SyncSet"),"s may be defined and those will be reconciled by the Gatekeeper syncset-controller. Notably, the ",(0,r.yg)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Union_(set_theory)"},"set union")," of all SyncSet resources' ",(0,r.yg)("inlineCode",{parentName:"li"},"gvks")," and the ",(0,r.yg)("a",{parentName:"li",href:"sync#replicating-data-with-config"},"Config")," resource's ",(0,r.yg)("inlineCode",{parentName:"li"},"syncOnly")," will be synced into the data client."),(0,r.yg)("li",{parentName:"ul"},"A resource will continue to be present in the data client so long as a SyncSet or Config still specifies it under the ",(0,r.yg)("inlineCode",{parentName:"li"},"gvks")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"syncOnly")," field.")),(0,r.yg)("h3",{id:"replicating-data-with-config"},"Replicating Data with Config"),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Feature State"),": Gatekeeper version v3.6+ (alpha)"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},'The "Config" resource must be named ',(0,r.yg)("inlineCode",{parentName:"p"},"config")," for it to be reconciled by Gatekeeper. Gatekeeper will ignore the resource if you do not name it ",(0,r.yg)("inlineCode",{parentName:"p"},"config"),".")),(0,r.yg)("p",null,"Kubernetes data can also be replicated into the data client via the Config resource. Resources defined in ",(0,r.yg)("inlineCode",{parentName:"p"},"syncOnly")," will be synced into OPA. Below is an example:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: config.gatekeeper.sh/v1alpha1\nkind: Config\nmetadata:\n  name: config\n  namespace: "gatekeeper-system"\nspec:\n  sync:\n    syncOnly:\n      - group: ""\n        version: "v1"\n        kind: "Namespace"\n      - group: ""\n        version: "v1"\n        kind: "Pod"\n')),(0,r.yg)("p",null,"You can install this config with the following command:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-sh"},"kubectl apply -f https://raw.githubusercontent.com/open-policy-agent/gatekeeper/master/demo/basic/sync.yaml\n")),(0,r.yg)("h4",{id:"working-with-config-resources"},"Working with Config resources"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Updating a Config's ",(0,r.yg)("inlineCode",{parentName:"li"},"syncOnly")," field should dynamically update what objects are synced."),(0,r.yg)("li",{parentName:"ul"},"The ",(0,r.yg)("inlineCode",{parentName:"li"},"Config")," resource is meant to be a singleton. The ",(0,r.yg)("a",{parentName:"li",href:"https://en.wikipedia.org/wiki/Union_(set_theory)"},"set union")," of all SyncSet resources' ",(0,r.yg)("inlineCode",{parentName:"li"},"gvks")," and the ",(0,r.yg)("a",{parentName:"li",href:"sync#replicating-data-with-config"},"Config")," resource's ",(0,r.yg)("inlineCode",{parentName:"li"},"syncOnly")," will be synced into the data client."),(0,r.yg)("li",{parentName:"ul"},"A resource will continue to be present in the data client so long as a SyncSet or Config still specifies it under the ",(0,r.yg)("inlineCode",{parentName:"li"},"gvks")," or ",(0,r.yg)("inlineCode",{parentName:"li"},"syncOnly")," field.")),(0,r.yg)("h3",{id:"accessing-replicated-data"},"Accessing replicated data"),(0,r.yg)("p",null,"Once data is synced, ConstraintTemplates can access the cached data under the ",(0,r.yg)("inlineCode",{parentName:"p"},"data.inventory")," document."),(0,r.yg)("p",null,"The ",(0,r.yg)("inlineCode",{parentName:"p"},"data.inventory")," document has the following format:"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"For cluster-scoped objects: ",(0,r.yg)("inlineCode",{parentName:"li"},"data.inventory.cluster[<groupVersion>][<kind>][<name>]"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Example referencing the Gatekeeper namespace: ",(0,r.yg)("inlineCode",{parentName:"li"},'data.inventory.cluster["v1"].Namespace["gatekeeper"]')))),(0,r.yg)("li",{parentName:"ul"},"For namespace-scoped objects: ",(0,r.yg)("inlineCode",{parentName:"li"},"data.inventory.namespace[<namespace>][groupVersion][<kind>][<name>]"),(0,r.yg)("ul",{parentName:"li"},(0,r.yg)("li",{parentName:"ul"},"Example referencing the Gatekeeper pod: ",(0,r.yg)("inlineCode",{parentName:"li"},'data.inventory.namespace["gatekeeper"]["v1"]["Pod"]["gatekeeper-controller-manager-d4c98b788-j7d92"]'))))),(0,r.yg)("h3",{id:"auditing-from-cache"},"Auditing From Cache"),(0,r.yg)("p",null,"The ",(0,r.yg)("a",{parentName:"p",href:"/gatekeeper/website/docs/v3.18.x/audit"},"audit")," feature does not require replication by default. However, when the ",(0,r.yg)("inlineCode",{parentName:"p"},"audit-from-cache")," flag is set to true, the audit informer cache will be used as the source-of-truth for audit queries; thus, an object must first be cached before it can be audited for constraint violations. Kubernetes data can be replicated into the audit cache via one of the resources above."))}y.isMDXComponent=!0}}]);