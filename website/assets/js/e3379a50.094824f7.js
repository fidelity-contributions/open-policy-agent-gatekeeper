"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[77680],{15680:(e,t,n)=>{n.d(t,{xA:()=>p,yg:()=>g});var a=n(96540);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function c(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var s=a.createContext({}),l=function(e){var t=a.useContext(s),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},p=function(e){var t=l(e.components);return a.createElement(s.Provider,{value:t},e.children)},d={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,o=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=l(n),g=r,m=u["".concat(s,".").concat(g)]||u[g]||d[g]||o;return n?a.createElement(m,i(i({ref:t},p),{},{components:n})):a.createElement(m,i({ref:t},p))}));function g(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var o=n.length,i=new Array(o);i[0]=u;var c={};for(var s in t)hasOwnProperty.call(t,s)&&(c[s]=t[s]);c.originalType=e,c.mdxType="string"==typeof e?e:r,i[1]=c;for(var l=2;l<o;l++)i[l]=n[l];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},19057:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var a=n(58168),r=n(98587),o=(n(96540),n(15680)),i=["components"],c={id:"security",title:"Security"},s=void 0,l={unversionedId:"security",id:"version-v3.17.x/security",title:"Security",description:"Please report vulnerabilities by email to open-policy-agent-security.",source:"@site/versioned_docs/version-v3.17.x/security.md",sourceDirName:".",slug:"/security",permalink:"/gatekeeper/website/docs/v3.17.x/security",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper/edit/master/website/versioned_docs/version-v3.17.x/security.md",tags:[],version:"v3.17.x",frontMatter:{id:"security",title:"Security"},sidebar:"docs",previous:{title:"How to contribute",permalink:"/gatekeeper/website/docs/v3.17.x/help"},next:{title:"Pubsub Interface/Driver walkthrough",permalink:"/gatekeeper/website/docs/v3.17.x/pubsub-driver"}},p={},d=[{value:"SBOM",id:"sbom",level:2},{value:"SLSA Provenance",id:"slsa-provenance",level:2}],u={toc:d};function g(e){var t=e.components,n=(0,r.A)(e,i);return(0,o.yg)("wrapper",(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,o.yg)("p",null,"Please report vulnerabilities by email to ",(0,o.yg)("a",{parentName:"p",href:"mailto:open-policy-agent-security@googlegroups.com"},"open-policy-agent-security"),".\nWe will send a confirmation message to acknowledge that we have received the\nreport and then we will send additional messages to follow up once the issue\nhas been investigated."),(0,o.yg)("p",null,"For details on the security release process please refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://github.com/open-policy-agent/opa/blob/main/SECURITY.md"},"open-policy-agent/opa/SECURITY.md")," file."),(0,o.yg)("h1",{id:"build-attestations"},"Build Attestations"),(0,o.yg)("p",null,"Gatekeeper provides build attestations for each release starting with v3.12.0. These attestations describe the image contents and how they were built. They are generated using ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/build/buildkit/"},"Docker BuildKit")," v0.11 or later. To get more information about build attestations, please refer to the ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/build/attestations/"},"Docker build attestations documentation"),"."),(0,o.yg)("p",null,"Gatekeeper provides ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/build/attestations/sbom/"},"Software Bill of Materials (SBOM)")," and ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/build/attestations/slsa-provenance/"},"SLSA Provenance")," for each image."),(0,o.yg)("p",null,"To get a list of images per OS and architecture and their corresponding attestations, please run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"$ docker buildx imagetools inspect openpolicyagent/gatekeeper:v3.12.0-rc.0\nName:      docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0\nMediaType: application/vnd.oci.image.index.v1+json\nDigest:    sha256:64b920b4b6d585d097649001e3a1794ae7669603f7e23b6af9156f67b21a6227\n\nManifests:\n  Name:        docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0@sha256:459c6662ed72bae083b7ba0da49037009dc10cee23e60a8d144df8c1663487a5\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    linux/amd64\n\n  Name:        docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0@sha256:53aeec87b4c5c7ced14c66e923728da4f321b85ebb14b4b30c2636d63946f714\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    linux/arm64\n\n  Name:        docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0@sha256:bc97e9f352d90961da6889534d01d1a955f348397ade55da035e2be127d13688\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    linux/arm/v7\n\n  Name:        docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0@sha256:f92564f87778c93070f9988f33723b5d7ce3d92afdbd2b959be8d8df190a9026\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    unknown/unknown\n  Annotations:\n    vnd.docker.reference.digest: sha256:459c6662ed72bae083b7ba0da49037009dc10cee23e60a8d144df8c1663487a5\n    vnd.docker.reference.type:   attestation-manifest\n\n  Name:        docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0@sha256:509672047e55607cc729ee29d96e1dee5d3fbeb75770e7ce11ddbbc60e0ed527\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    unknown/unknown\n  Annotations:\n    vnd.docker.reference.digest: sha256:53aeec87b4c5c7ced14c66e923728da4f321b85ebb14b4b30c2636d63946f714\n    vnd.docker.reference.type:   attestation-manifest\n\n  Name:        docker.io/openpolicyagent/gatekeeper:v3.12.0-rc.0@sha256:d65af6b76cbef07ad9e4d054b1a7b9586c0f4f732701781401d71f1a60bd626d\n  MediaType:   application/vnd.oci.image.manifest.v1+json\n  Platform:    unknown/unknown\n  Annotations:\n    vnd.docker.reference.digest: sha256:bc97e9f352d90961da6889534d01d1a955f348397ade55da035e2be127d13688\n    vnd.docker.reference.type:   attestation-manifest\n")),(0,o.yg)("h2",{id:"sbom"},"SBOM"),(0,o.yg)("blockquote",null,(0,o.yg)("p",{parentName:"blockquote"},"Note: Gatekeeper generates 2 SBOMs. First is for the build stage which includes the builder image and Gatekeeper source code. Second is for the final stage that includes the built Gatekeeper binary (",(0,o.yg)("inlineCode",{parentName:"p"},"manager"),").")),(0,o.yg)("p",null,"To retrieve ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/build/attestations/sbom/"},"SBOM")," for all architectures, please run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"docker buildx imagetools inspect openpolicyagent/gatekeeper:v3.12.0-rc.0 --format '{{ json .SBOM }}'\n")),(0,o.yg)("p",null,"For specific architecutes (like ",(0,o.yg)("inlineCode",{parentName:"p"},"linux/amd64"),"), please run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"docker buildx imagetools inspect openpolicyagent/gatekeeper:v3.12.0-rc.0 --format '{{ json .SBOM }}' | jq -r '.[\"linux/amd64\"]'\n")),(0,o.yg)("h2",{id:"slsa-provenance"},"SLSA Provenance"),(0,o.yg)("p",null,"To retrieve ",(0,o.yg)("a",{parentName:"p",href:"https://docs.docker.com/build/attestations/slsa-provenance/"},"SLSA provenance"),", please run:"),(0,o.yg)("pre",null,(0,o.yg)("code",{parentName:"pre",className:"language-shell"},"docker buildx imagetools inspect openpolicyagent/gatekeeper:v3.12.0-rc.0 --format '{{ json .Provenance }}'\n")))}g.isMDXComponent=!0}}]);