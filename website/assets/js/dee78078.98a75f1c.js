"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[3176],{15680:(e,n,a)=>{a.d(n,{xA:()=>m,yg:()=>c});var t=a(96540);function r(e,n,a){return n in e?Object.defineProperty(e,n,{value:a,enumerable:!0,configurable:!0,writable:!0}):e[n]=a,e}function i(e,n){var a=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),a.push.apply(a,t)}return a}function s(e){for(var n=1;n<arguments.length;n++){var a=null!=arguments[n]?arguments[n]:{};n%2?i(Object(a),!0).forEach((function(n){r(e,n,a[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(a)):i(Object(a)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(a,n))}))}return e}function l(e,n){if(null==e)return{};var a,t,r=function(e,n){if(null==e)return{};var a,t,r={},i=Object.keys(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||(r[a]=e[a]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(t=0;t<i.length;t++)a=i[t],n.indexOf(a)>=0||Object.prototype.propertyIsEnumerable.call(e,a)&&(r[a]=e[a])}return r}var o=t.createContext({}),p=function(e){var n=t.useContext(o),a=n;return e&&(a="function"==typeof e?e(n):s(s({},n),e)),a},m=function(e){var n=p(e.components);return t.createElement(o.Provider,{value:n},e.children)},g={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},d=t.forwardRef((function(e,n){var a=e.components,r=e.mdxType,i=e.originalType,o=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),d=p(a),c=r,u=d["".concat(o,".").concat(c)]||d[c]||g[c]||i;return a?t.createElement(u,s(s({ref:n},m),{},{components:a})):t.createElement(u,s({ref:n},m))}));function c(e,n){var a=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=a.length,s=new Array(i);s[0]=d;var l={};for(var o in n)hasOwnProperty.call(n,o)&&(l[o]=n[o]);l.originalType=e,l.mdxType="string"==typeof e?e:r,s[1]=l;for(var p=2;p<i;p++)s[p]=a[p];return t.createElement.apply(null,s)}return t.createElement.apply(null,a)}d.displayName="MDXCreateElement"},8896:(e,n,a)=>{a.r(n),a.d(n,{assets:()=>m,contentTitle:()=>o,default:()=>c,frontMatter:()=>l,metadata:()=>p,toc:()=>g});var t=a(58168),r=a(98587),i=(a(96540),a(15680)),s=["components"],l={id:"constrainttemplates",title:"Constraint Templates"},o=void 0,p={unversionedId:"constrainttemplates",id:"constrainttemplates",title:"Constraint Templates",description:"ConstraintTemplates define a way to validate some set of Kubernetes objects in Gatekeeper's Kubernetes admission controller.  They are made of two main elements:",source:"@site/docs/constrainttemplates.md",sourceDirName:".",slug:"/constrainttemplates",permalink:"/gatekeeper/website/docs/next/constrainttemplates",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper/edit/master/website/docs/constrainttemplates.md",tags:[],version:"current",frontMatter:{id:"constrainttemplates",title:"Constraint Templates"},sidebar:"docs",previous:{title:"Mutation",permalink:"/gatekeeper/website/docs/next/mutation"},next:{title:"External Data",permalink:"/gatekeeper/website/docs/next/externaldata"}},m={},g=[{value:"<code>v1</code> Constraint Template",id:"v1-constraint-template",level:2},{value:"Why implement this change?",id:"why-implement-this-change",level:2},{value:"Enable OPA Rego v1 syntax in ConstraintTemplates",id:"enable-opa-rego-v1-syntax-in-constrainttemplates",level:2},{value:"Built-in variables across all engines",id:"built-in-variables-across-all-engines",level:2},{value:"Common variables",id:"common-variables",level:3},{value:"Rego variables",id:"rego-variables",level:3},{value:"CEL variables",id:"cel-variables",level:3}],d={toc:g};function c(e){var n=e.components,a=(0,r.A)(e,s);return(0,i.yg)("wrapper",(0,t.A)({},d,a,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"ConstraintTemplates define a way to validate some set of Kubernetes objects in Gatekeeper's Kubernetes ",(0,i.yg)("a",{parentName:"p",href:"https://kubernetes.io/blog/2019/03/21/a-guide-to-kubernetes-admission-controllers/"},"admission controller"),".  They are made of two main elements:"),(0,i.yg)("ol",null,(0,i.yg)("li",{parentName:"ol"},(0,i.yg)("a",{parentName:"li",href:"https://www.openpolicyagent.org/docs/latest/#rego"},"Rego")," code that defines a policy violation"),(0,i.yg)("li",{parentName:"ol"},"The schema of the accompanying ",(0,i.yg)("inlineCode",{parentName:"li"},"Constraint")," object, which represents an instantiation of a ",(0,i.yg)("inlineCode",{parentName:"li"},"ConstraintTemplate"))),(0,i.yg)("h2",{id:"v1-constraint-template"},(0,i.yg)("inlineCode",{parentName:"h2"},"v1")," Constraint Template"),(0,i.yg)("p",null,"In release version 3.6.0, Gatekeeper included the ",(0,i.yg)("inlineCode",{parentName:"p"},"v1")," version of ",(0,i.yg)("inlineCode",{parentName:"p"},"ConstraintTemplate"),".  Unlike past versions of ",(0,i.yg)("inlineCode",{parentName:"p"},"ConstraintTemplate"),", ",(0,i.yg)("inlineCode",{parentName:"p"},"v1")," requires the Constraint schema section to be ",(0,i.yg)("a",{parentName:"p",href:"https://kubernetes.io/blog/2019/06/20/crd-structural-schema/"},"structural"),"."),(0,i.yg)("p",null,"Structural schemas have a variety of ",(0,i.yg)("a",{parentName:"p",href:"https://kubernetes.io/docs/tasks/extend-kubernetes/custom-resources/custom-resource-definitions/#specifying-a-structural-schema"},"requirements"),".  One such requirement is that the ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," field be defined for each level of the schema."),(0,i.yg)("p",null,"For example, users of Gatekeeper may recognize the ",(0,i.yg)("inlineCode",{parentName:"p"},"k8srequiredlabels")," ConstraintTemplate, defined here in version ",(0,i.yg)("inlineCode",{parentName:"p"},"v1beta1"),":"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1beta1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          properties:\n            labels:\n              type: array\n              items:\n                type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      rego: |\n        package k8srequiredlabels\n\n        violation[{"msg": msg, "details": {"missing_labels": missing}}] {\n          provided := {label | input.review.object.metadata.labels[label]}\n          required := {label | label := input.parameters.labels[_]}\n          missing := required - provided\n          count(missing) > 0\n          msg := sprintf("you must provide labels: %v", [missing])\n        }\n')),(0,i.yg)("p",null,"The ",(0,i.yg)("inlineCode",{parentName:"p"},"parameters")," field schema (",(0,i.yg)("inlineCode",{parentName:"p"},"spec.crd.spec.validation.openAPIV3Schema"),") is ",(0,i.yg)("em",{parentName:"p"},"not")," structural.  Notably, it is missing the ",(0,i.yg)("inlineCode",{parentName:"p"},"type:")," declaration:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"openAPIV3Schema:\n  # missing type\n  properties:\n    labels:\n      type: array\n      items:\n        type: string\n")),(0,i.yg)("p",null,"This schema is ",(0,i.yg)("em",{parentName:"p"},"invalid")," by default in a ",(0,i.yg)("inlineCode",{parentName:"p"},"v1")," ConstraintTemplate.  Adding the ",(0,i.yg)("inlineCode",{parentName:"p"},"type")," information makes the schema valid:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},"openAPIV3Schema:\n  type: object\n  properties:\n    labels:\n      type: array\n      items:\n        type: string\n")),(0,i.yg)("p",null,"For more information on valid types in JSONSchemas, see the ",(0,i.yg)("a",{parentName:"p",href:"https://json-schema.org/understanding-json-schema/reference/type.html"},"JSONSchema documentation"),"."),(0,i.yg)("h2",{id:"why-implement-this-change"},"Why implement this change?"),(0,i.yg)("p",null,"Structural schemas are required in version ",(0,i.yg)("inlineCode",{parentName:"p"},"v1")," of ",(0,i.yg)("inlineCode",{parentName:"p"},"CustomResourceDefinition")," resources, which underlie ConstraintTemplates.  Requiring the same in ConstraintTemplates puts Gatekeeper in line with the overall direction of Kubernetes."),(0,i.yg)("p",null,"Beyond this alignment, structural schemas yield significant usability improvements. The schema of a ConstraintTemplate's associated Constraint is both more visible and type validated."),(0,i.yg)("p",null,"As the data types of Constraint fields are defined in the ConstraintTemplate, the API server will reject a Constraint with an incorrect ",(0,i.yg)("inlineCode",{parentName:"p"},"parameters")," field. Previously, the API server would ingest it and simply not pass those ",(0,i.yg)("inlineCode",{parentName:"p"},"parameters")," to Gatekeeper.  This experience was confusing for users, and is noticeably improved by structural schemas."),(0,i.yg)("p",null,"For example, see this incorrectly defined ",(0,i.yg)("inlineCode",{parentName:"p"},"k8srequiredlabels")," Constraint:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: ns-must-have-gk\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Namespace"]\n  parameters:\n    # Note that "labels" is now contained in an array item, rather than an object key under "parameters"\n    - labels: ["gatekeeper"]\n')),(0,i.yg)("p",null,"In a ",(0,i.yg)("inlineCode",{parentName:"p"},"v1beta1")," ConstraintTemplate, this Constraint would be ingested successfully.  However, it would not work.  The creation of a new namespace, ",(0,i.yg)("inlineCode",{parentName:"p"},"foobar"),", would succeed, even in the absence of the ",(0,i.yg)("inlineCode",{parentName:"p"},"gatekeeper")," label:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},"$ kubectl create ns foobar\nnamespace/foobar created\n")),(0,i.yg)("p",null,"This is incorrect.  We'd expect this to fail:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'$ kubectl create ns foobar\nError from server ([ns-must-have-gk] you must provide labels: {"gatekeeper"}): admission webhook "validation.gatekeeper.sh" denied the request: [ns-must-have-gk] you must provide labels: {"gatekeeper"}\n')),(0,i.yg)("p",null,"The structural schema requirement ",(0,i.yg)("em",{parentName:"p"},"prevents this mistake"),".  The aforementioned ",(0,i.yg)("inlineCode",{parentName:"p"},"type: object")," declaration would prevent the API server from accepting the incorrect ",(0,i.yg)("inlineCode",{parentName:"p"},"k8srequiredlabels")," Constraint."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'# Apply the Constraint with incorrect parameters schema\n$ cat << EOF | kubectl apply -f -\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: ns-must-have-gk\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Namespace"]\n  parameters:\n    # Note that "labels" is now an array item, rather than an object\n    - labels: ["gatekeeper"]\nEOF\nThe K8sRequiredLabels "ns-must-have-gk" is invalid: spec.parameters: Invalid value: "array": spec.parameters in body must be of type object: "array"\n')),(0,i.yg)("p",null,"Fixing the incorrect ",(0,i.yg)("inlineCode",{parentName:"p"},"parameters")," section would then yield a successful ingestion and a working Constraint."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'$ cat << EOF | kubectl apply -f -\napiVersion: constraints.gatekeeper.sh/v1beta1\nkind: K8sRequiredLabels\nmetadata:\n  name: ns-must-have-gk\nspec:\n  match:\n    kinds:\n      - apiGroups: [""]\n        kinds: ["Namespace"]\n  parameters:\n    labels: ["gatekeeper"]\nEOF\nk8srequiredlabels.constraints.gatekeeper.sh/ns-must-have-gk created\n')),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-shell"},'$ kubectl create ns foobar\nError from server ([ns-must-have-gk] you must provide labels: {"gatekeeper"}): admission webhook "validation.gatekeeper.sh" denied the request: [ns-must-have-gk] you must provide labels: {"gatekeeper"}\n')),(0,i.yg)("h2",{id:"enable-opa-rego-v1-syntax-in-constrainttemplates"},"Enable OPA Rego v1 syntax in ConstraintTemplates"),(0,i.yg)("p",null,"Gatekeeper 3.19 ships with ability to use OPA Rego v1 as policy language in ConstraintTemplates. Using Rego v1 syntax is opt-in, by default only Rego v0 is allowed. You can use below spec to enable Rego v1 syntax:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'...\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      code:\n        - engine: Rego\n          source:\n            version: "v1"\n            rego: |\n              <v1-rego-code>\n...\n')),(0,i.yg)("admonition",{type:"note"},(0,i.yg)("p",{parentName:"admonition"},"Rego v1 syntax can only be used under ",(0,i.yg)("inlineCode",{parentName:"p"},"targets[_].code[_].[engine: Rego].source")," with ",(0,i.yg)("inlineCode",{parentName:"p"},'version: "v1"'),". No need to add ",(0,i.yg)("inlineCode",{parentName:"p"},"import rego.v1")," to use rego v1 syntax.")),(0,i.yg)("p",null,"Here is a sample ConstraintTemplate using Rego v1 syntax:"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: templates.gatekeeper.sh/v1\nkind: ConstraintTemplate\nmetadata:\n  name: k8srequiredlabels\nspec:\n  crd:\n    spec:\n      names:\n        kind: K8sRequiredLabels\n      validation:\n        # Schema for the `parameters` field\n        openAPIV3Schema:\n          type: object\n          properties:\n            message:\n              type: string\n            labels:\n              type: array\n              items:\n                type: object\n                properties:\n                  key:\n                    type: string\n                  allowedRegex:\n                    type: string\n  targets:\n    - target: admission.k8s.gatekeeper.sh\n      code:\n        - engine: Rego\n          source:\n            version: "v1"\n            rego: |\n              package k8srequiredlabels\n\n              violation contains \n                {"msg": msg, "details": {"missing_labels": missing}} \n                if {\n                  provided := {label | input.review.object.metadata.labels[label]}\n                  required := {label | label := input.parameters.labels[_]}\n                  missing := required - provided\n                  count(missing) > 0\n                  msg := sprintf("you must provide labels: %v", [missing])\n                }\n')),(0,i.yg)("h2",{id:"built-in-variables-across-all-engines"},"Built-in variables across all engines"),(0,i.yg)("h3",{id:"common-variables"},"Common variables"),(0,i.yg)("h3",{id:"rego-variables"},"Rego variables"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Variable"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"input.review")),(0,i.yg)("td",{parentName:"tr",align:null},"Contains input request object under review")),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"input.parameters")),(0,i.yg)("td",{parentName:"tr",align:null},"Contains constraint parameters e.g. ",(0,i.yg)("inlineCode",{parentName:"td"},"input.parameters.repos")," see ",(0,i.yg)("a",{parentName:"td",href:"https://open-policy-agent.github.io/gatekeeper-library/website/validation/allowedrepos"},"example"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"data.lib")),(0,i.yg)("td",{parentName:"tr",align:null},"It serves as an import path for helper functions defined under ",(0,i.yg)("inlineCode",{parentName:"td"},"libs")," in ConstraintTemplate, e.g. data.lib.exempt_container.is_exempt see ",(0,i.yg)("a",{parentName:"td",href:"https://open-policy-agent.github.io/gatekeeper-library/website/validation/host-network-ports"},"example"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"data.inventory")),(0,i.yg)("td",{parentName:"tr",align:null},"Refers to a structure that stores synced cluster resources. It is used in Rego policies to validate or enforce referential rules based on the current state of the cluster. e.g. unique ingress host ",(0,i.yg)("a",{parentName:"td",href:"https://open-policy-agent.github.io/gatekeeper-library/website/validation/uniqueingresshost/"},"example"))))),(0,i.yg)("h3",{id:"cel-variables"},"CEL variables"),(0,i.yg)("table",null,(0,i.yg)("thead",{parentName:"table"},(0,i.yg)("tr",{parentName:"thead"},(0,i.yg)("th",{parentName:"tr",align:null},"Variable"),(0,i.yg)("th",{parentName:"tr",align:null},"Description"))),(0,i.yg)("tbody",{parentName:"table"},(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"variables.params")),(0,i.yg)("td",{parentName:"tr",align:null},"Contains constraint parameters e.g. ",(0,i.yg)("inlineCode",{parentName:"td"},"variables.params.labels")," see ",(0,i.yg)("a",{parentName:"td",href:"https://open-policy-agent.github.io/gatekeeper-library/website/validation/requiredlabels"},"example"))),(0,i.yg)("tr",{parentName:"tbody"},(0,i.yg)("td",{parentName:"tr",align:null},(0,i.yg)("inlineCode",{parentName:"td"},"variables.anyObject")),(0,i.yg)("td",{parentName:"tr",align:null},"Contains either an object or (on DELETE requests) oldObject, see ",(0,i.yg)("a",{parentName:"td",href:"https://open-policy-agent.github.io/gatekeeper-library/website/validation/requiredlabels"},"example"))))))}c.isMDXComponent=!0}}]);