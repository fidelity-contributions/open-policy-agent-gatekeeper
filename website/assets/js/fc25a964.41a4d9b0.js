"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[57277],{15680:(e,t,n)=>{n.d(t,{xA:()=>d,yg:()=>g});var a=n(96540);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function r(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function o(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?r(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):r(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},r=Object.keys(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(a=0;a<r.length;a++)n=r[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var p=a.createContext({}),l=function(e){var t=a.useContext(p),n=t;return e&&(n="function"==typeof e?e(t):o(o({},t),e)),n},d=function(e){var t=l(e.components);return a.createElement(p.Provider,{value:t},e.children)},c={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},u=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,r=e.originalType,p=e.parentName,d=s(e,["components","mdxType","originalType","parentName"]),u=l(n),g=i,m=u["".concat(p,".").concat(g)]||u[g]||c[g]||r;return n?a.createElement(m,o(o({ref:t},d),{},{components:n})):a.createElement(m,o({ref:t},d))}));function g(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var r=n.length,o=new Array(r);o[0]=u;var s={};for(var p in t)hasOwnProperty.call(t,p)&&(s[p]=t[p]);s.originalType=e,s.mdxType="string"==typeof e?e:i,o[1]=s;for(var l=2;l<r;l++)o[l]=n[l];return a.createElement.apply(null,o)}return a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},5298:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>d,contentTitle:()=>p,default:()=>g,frontMatter:()=>s,metadata:()=>l,toc:()=>c});var a=n(58168),i=n(98587),r=(n(96540),n(15680)),o=["components"],s={id:"export",title:"Exporting violations"},p=void 0,l={unversionedId:"export",id:"export",title:"Exporting violations",description:"Feature State: Gatekeeper version v3.13+ (alpha)",source:"@site/docs/export.md",sourceDirName:".",slug:"/export",permalink:"/gatekeeper/website/docs/next/export",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper/edit/master/website/docs/export.md",tags:[],version:"current",frontMatter:{id:"export",title:"Exporting violations"},sidebar:"docs",previous:{title:"Working with Workload Resources",permalink:"/gatekeeper/website/docs/next/workload-resources"},next:{title:"Integration with Kubernetes Validating Admission Policy",permalink:"/gatekeeper/website/docs/next/validating-admission-policy"}},d={},c=[{value:"Description",id:"description",level:2},{value:"Enabling Gatekeeper to export audit violations",id:"enabling-gatekeeper-to-export-audit-violations",level:2},{value:"Setting up audit to export violations",id:"setting-up-audit-to-export-violations",level:3},{value:"Available drivers",id:"available-drivers",level:4},{value:"Status",id:"status",level:4},{value:"Quick start with exporting violations using Dapr and Redis",id:"quick-start-with-exporting-violations-using-dapr-and-redis",level:3},{value:"Prerequisites for Dapr",id:"prerequisites-for-dapr",level:4},{value:"Configure a sample subscriber to receive violations",id:"configure-a-sample-subscriber-to-receive-violations",level:4},{value:"Configure Gatekeeper with Export enabled with Dapr",id:"configure-gatekeeper-with-export-enabled-with-dapr",level:4},{value:"Quick start with exporting violations on node storage using Disk driver via emptyDir",id:"quick-start-with-exporting-violations-on-node-storage-using-disk-driver-via-emptydir",level:3},{value:"Configure Gatekeeper with Export enabled to Disk",id:"configure-gatekeeper-with-export-enabled-to-disk",level:4},{value:"Violations",id:"violations",level:3}],u={toc:c};function g(e){var t=e.components,n=(0,i.A)(e,o);return(0,r.yg)("wrapper",(0,a.A)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.yg)("p",null,(0,r.yg)("inlineCode",{parentName:"p"},"Feature State"),": Gatekeeper version v3.13+ (alpha)"),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},'\u2757 This feature is alpha, subject to change (feedback is welcome!). This feature was previously known as "Consuming violations using Pubsub".')),(0,r.yg)("h2",{id:"description"},"Description"),(0,r.yg)("p",null,"This feature exports audit violations to a backend from where users can consume violations."),(0,r.yg)("blockquote",null,(0,r.yg)("p",{parentName:"blockquote"},"To gain insights into different methods of obtaining audit violations and the respective trade-offs for each approach, please refer to ",(0,r.yg)("a",{parentName:"p",href:"/gatekeeper/website/docs/next/audit#reading-audit-results"},"Reading Audit Results"),".")),(0,r.yg)("h2",{id:"enabling-gatekeeper-to-export-audit-violations"},"Enabling Gatekeeper to export audit violations"),(0,r.yg)("p",null,"Install prerequisites such as a pubsub tool, a message broker etc."),(0,r.yg)("h3",{id:"setting-up-audit-to-export-violations"},"Setting up audit to export violations"),(0,r.yg)("p",null,"In the audit deployment, set the ",(0,r.yg)("inlineCode",{parentName:"p"},"--enable-violation-export")," flag to ",(0,r.yg)("inlineCode",{parentName:"p"},"true")," to export audit violations. Additionally, use ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-connection")," (defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"audit-connection"),") and ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-channel"),"(defaults to ",(0,r.yg)("inlineCode",{parentName:"p"},"audit-channel"),") flags to allow audit to export violations using desired connection onto desired channel. ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-connection")," must be set to the name of the connection config, and ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-channel")," must be set to name of the channel where violations should get published."),(0,r.yg)("p",null,"A ",(0,r.yg)("inlineCode",{parentName:"p"},"Connection")," custom resource with ",(0,r.yg)("inlineCode",{parentName:"p"},"spec")," that contains ",(0,r.yg)("inlineCode",{parentName:"p"},"driver")," and ",(0,r.yg)("inlineCode",{parentName:"p"},"config")," fields are required to establish connection for sending violations over the channel. Following is an example to establish a connection that uses Dapr to export messages:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: connection.gatekeeper.sh/v1alpha1\nkind: Connection\nmetadata:\n  name: audit-connection\n  namespace: gatekeeper-system\nspec:\n  driver: "dapr"\n  config:\n    component: "pubsub"\n')),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"driver")," field determines which tool/driver should be used to establish a connection. Valid values are: ",(0,r.yg)("inlineCode",{parentName:"li"},"dapr"),", ",(0,r.yg)("inlineCode",{parentName:"li"},"disk")),(0,r.yg)("li",{parentName:"ul"},(0,r.yg)("inlineCode",{parentName:"li"},"config")," field is an object that configures how the connection is made. E.g. which queue messages should be sent to.")),(0,r.yg)("h4",{id:"available-drivers"},"Available drivers"),(0,r.yg)("ul",null,(0,r.yg)("li",{parentName:"ul"},"Dapr: Export violations using pubsub model provided with ",(0,r.yg)("a",{parentName:"li",href:"https://dapr.io/"},"Dapr")),(0,r.yg)("li",{parentName:"ul"},"Disk: Export violations to file system.")),(0,r.yg)("h4",{id:"status"},"Status"),(0,r.yg)("p",null,"Upon controller ingestion, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Connection")," will reflect the state of the export connection on its ",(0,r.yg)("inlineCode",{parentName:"p"},"status")," sub resource."),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: connection.gatekeeper.sh/v1alpha1\nkind: Connection\nmetadata:\n  name: audit-connection\n  namespace: gatekeeper-system\nspec:\n  driver: "dapr"\n  config:\n    component: "pubsub"\nstatus:\n  byPod:\n    ID: "pod-id"\n    ConnectionUID: "connection-id"\n    Active: {true | false}\n    Errors:\n      - Type: UpsertConnection\n        Message: "Error message"\n      - Type: Publish\n        Message: "Error message"\n')),(0,r.yg)("p",null,"The following table describes each property in the ",(0,r.yg)("inlineCode",{parentName:"p"},"status.byPod")," section:"),(0,r.yg)("table",null,(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:null},"Property"),(0,r.yg)("th",{parentName:"tr",align:null},"Type"),(0,r.yg)("th",{parentName:"tr",align:null},"Description"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"ID")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"Unique identifier for the pod handling the connection")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"ConnectionUID")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"Unique identifier for the specific connection instance")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Active")),(0,r.yg)("td",{parentName:"tr",align:null},"boolean"),(0,r.yg)("td",{parentName:"tr",align:null},"Indicates whether the connection had at least one successful publishing and is currently active and operational (",(0,r.yg)("inlineCode",{parentName:"td"},"true"),") or inactive (",(0,r.yg)("inlineCode",{parentName:"td"},"false"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Errors")),(0,r.yg)("td",{parentName:"tr",align:null},"array"),(0,r.yg)("td",{parentName:"tr",align:null},"List of error objects containing information about any issues with the connection")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Errors[].Type")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"Type of error encountered (e.g., ",(0,r.yg)("inlineCode",{parentName:"td"},"UpsertConnection"),", ",(0,r.yg)("inlineCode",{parentName:"td"},"PublishingError"),")")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:null},(0,r.yg)("inlineCode",{parentName:"td"},"Errors[].Message")),(0,r.yg)("td",{parentName:"tr",align:null},"string"),(0,r.yg)("td",{parentName:"tr",align:null},"Human-readable description of the error")))),(0,r.yg)("h3",{id:"quick-start-with-exporting-violations-using-dapr-and-redis"},"Quick start with exporting violations using Dapr and Redis"),(0,r.yg)("h4",{id:"prerequisites-for-dapr"},"Prerequisites for Dapr"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install Dapr"),(0,r.yg)("p",{parentName:"li"}," To install Dapr with specific requirements and configuration, please refer to ",(0,r.yg)("a",{parentName:"p",href:"https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-deploy/"},"Dapr docs"),"."),(0,r.yg)("admonition",{parentName:"li",type:"important"},(0,r.yg)("ul",{parentName:"admonition"},(0,r.yg)("li",{parentName:"ul"},"Make sure to set ",(0,r.yg)("inlineCode",{parentName:"li"},"SIDECAR_DROP_ALL_CAPABILITIES")," environment variable on ",(0,r.yg)("inlineCode",{parentName:"li"},"dapr-sidecar")," injector pod to ",(0,r.yg)("inlineCode",{parentName:"li"},"true")," to avoid getting ",(0,r.yg)("inlineCode",{parentName:"li"},"PodSecurity violation")," errors for the injected sidecar container as Gatekeeper by default requires workloads to run with ",(0,r.yg)("a",{parentName:"li",href:"https://kubernetes.io/docs/concepts/security/pod-security-standards/#restricted"},"restricted")," policy. If using helm charts to install Dapr, you can use ",(0,r.yg)("inlineCode",{parentName:"li"},"--set dapr_sidecar_injector.sidecarDropALLCapabilities=true"),"."),(0,r.yg)("li",{parentName:"ul"},"Additionally, ",(0,r.yg)("a",{parentName:"li",href:"https://docs.dapr.io/operations/hosting/kubernetes/kubernetes-production/#configure-seccompprofile-for-sidecar-containers"},"configure appropriate seccompProfile for sidecar containers")," injected by Dapr to avoid getting ",(0,r.yg)("inlineCode",{parentName:"li"},"PodSecurity violation")," errors. We are setting required Dapr annotation for audit pod while deploying Gatekeeper later in this quick start to avoid getting ",(0,r.yg)("inlineCode",{parentName:"li"},"PodSecurity violation")," error."))),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"Dapr is installed with mtls enabled by default, for more details on the same please refer to ",(0,r.yg)("a",{parentName:"p",href:"https://docs.dapr.io/operations/security/mtls/#setting-up-mtls-with-the-configuration-resource"},"Dapr security"),"."))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Install Redis"),(0,r.yg)("p",{parentName:"li"},"Please refer to ",(0,r.yg)("a",{parentName:"p",href:"https://docs.dapr.io/getting-started/tutorials/configure-state-pubsub/#step-1-create-a-redis-store"},"this")," guide to install Redis."),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"Redis is used for example purposes only. Dapr supports ",(0,r.yg)("a",{parentName:"p",href:"https://docs.dapr.io/reference/components-reference/supported-state-stores/"},"many different state store options"),". To install Redis with TLS, please refer to ",(0,r.yg)("a",{parentName:"p",href:"https://docs.bitnami.com/kubernetes/infrastructure/redis-cluster/administration/enable-tls/"},"this")," doc.")))),(0,r.yg)("h4",{id:"configure-a-sample-subscriber-to-receive-violations"},"Configure a sample subscriber to receive violations"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create ",(0,r.yg)("inlineCode",{parentName:"p"},"fake-subscriber")," namespace and redis secret"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl create ns fake-subscriber\n# creating redis secret in subscriber namespace to allow Dapr sidecar to connect to redis instance\nkubectl get secret redis --namespace=default -o yaml | sed 's/namespace: .*/namespace: fake-subscriber/' | kubectl apply -f -\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create Dapr pubsub component"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl apply -f - <<EOF\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\n  namespace: fake-subscriber\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: redis-master.default.svc.cluster.local:6379\n  - name: redisPassword\n    secretKeyRef: \n      name: redis\n      key: redis-password\nEOF\n")),(0,r.yg)("blockquote",{parentName:"li"},(0,r.yg)("p",{parentName:"blockquote"},"Please use ",(0,r.yg)("a",{parentName:"p",href:"https://docs.dapr.io/reference/components-reference/supported-state-stores/setup-redis/"},"this guide")," to properly configure Redis pubsub component for Dapr."))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Deploy subscriber application"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: apps/v1\nkind: Deployment\nmetadata:\n  name: sub\n  namespace: fake-subscriber\n  labels:\n    app: sub\nspec:\n  replicas: 1\n  selector:\n    matchLabels:\n      app: sub\n  template:\n    metadata:\n      labels:\n        app: sub\n      annotations:\n        dapr.io/enabled: "true"\n        dapr.io/app-id: "subscriber"\n        dapr.io/enable-api-logging: "true"\n        dapr.io/app-port: "6002"\n    spec:\n      containers:\n      - name: go-sub\n        image: fake-subscriber:latest\n        imagePullPolicy: Never\n')),(0,r.yg)("admonition",{parentName:"li",type:"important"},(0,r.yg)("p",{parentName:"admonition"},"Please make sure ",(0,r.yg)("inlineCode",{parentName:"p"},"fake-subscriber")," image is built and available in your cluster. Dockerfile to build image for ",(0,r.yg)("inlineCode",{parentName:"p"},"fake-subscriber")," is under ",(0,r.yg)("a",{parentName:"p",href:"https://github.com/open-policy-agent/gatekeeper/tree/master/test/export/fake-subscriber"},"gatekeeper/test/export/fake-subscriber"),".")))),(0,r.yg)("h4",{id:"configure-gatekeeper-with-export-enabled-with-dapr"},"Configure Gatekeeper with Export enabled with Dapr"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create Gatekeeper namespace, and create Dapr pubsub component and Redis secret in Gatekeeper's namespace (",(0,r.yg)("inlineCode",{parentName:"p"},"gatekeeper-system")," by default). Please make sure to update ",(0,r.yg)("inlineCode",{parentName:"p"},"gatekeeper-system")," namespace for the next steps if your cluster's Gatekeeper namespace is different."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl create namespace gatekeeper-system\nkubectl get secret redis --namespace=default -o yaml | sed 's/namespace: .*/namespace: gatekeeper-system/' | kubectl apply -f -\nkubectl apply -f - <<EOF\napiVersion: dapr.io/v1alpha1\nkind: Component\nmetadata:\n  name: pubsub\n  namespace: gatekeeper-system\nspec:\n  type: pubsub.redis\n  version: v1\n  metadata:\n  - name: redisHost\n    value: redis-master.default.svc.cluster.local:6379\n  - name: redisPassword\n    secretKeyRef:\n      name: redis\n      key: redis-password\nEOF\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"To upgrade or install Gatekeeper with ",(0,r.yg)("inlineCode",{parentName:"p"},"--enable-violation-export")," set to ",(0,r.yg)("inlineCode",{parentName:"p"},"true"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-connection")," set to ",(0,r.yg)("inlineCode",{parentName:"p"},"audit-connection"),", ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-channel")," set to ",(0,r.yg)("inlineCode",{parentName:"p"},"audit-channel")," on audit pod."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'# auditPodAnnotations is used to add annotations required by Dapr to inject sidecar to audit pod\necho \'auditPodAnnotations: {dapr.io/enabled: "true", dapr.io/app-id: "audit", dapr.io/metrics-port: "9999", dapr.io/sidecar-seccomp-profile-type: "RuntimeDefault"}\' > /tmp/annotations.yaml\nhelm upgrade --install gatekeeper gatekeeper/gatekeeper --namespace gatekeeper-system \\\n--set enableViolationExport=true \\\n--set audit.connection=audit-connection \\\n--set audit.channel=audit-channel \\\n--values /tmp/annotations.yaml\n')),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Note:")," Verify that after the audit pod is running there is a Dapr sidecar injected and running along side ",(0,r.yg)("inlineCode",{parentName:"p"},"manager")," container.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create connection config to establish a connection."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},'kubectl apply -f - <<EOF\napiVersion: connection.gatekeeper.sh/v1alpha1\nkind: Connection\nmetadata:\n  name: audit-connection\n  namespace: gatekeeper-system\nspec:\n  driver: "dapr"\n  config:\n    component: "pubsub"\nEOF\n')),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Note:")," Name of the ",(0,r.yg)("inlineCode",{parentName:"p"},"Connection")," custom resource must match the value of ",(0,r.yg)("inlineCode",{parentName:"p"},"--audit-connection")," for it to be used by audit to export violation. At the moment, only one connection can exist for audit.")),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create the constraint templates and constraints, and make sure audit ran by checking constraints. If constraint status is updated with information such as ",(0,r.yg)("inlineCode",{parentName:"p"},"auditTimeStamp")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"totalViolations"),", then audit has ran at least once. Additionally, populated ",(0,r.yg)("inlineCode",{parentName:"p"},"TOTAL-VIOLATIONS")," field for all constraints while listing constraints also indicates that audit has ran at least once."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-log"},"kubectl get constraint\nNAME                 ENFORCEMENT-ACTION   TOTAL-VIOLATIONS\npod-must-have-test                        0\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Finally, check the subscriber logs to see the violations received."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-log"},'kubectl logs -l app=sub -c go-sub -n fake-subscriber \n2023/07/18 20:16:41 Listening...\n2023/07/18 20:37:20 main.ExportMsg{ID:"2023-07-18T20:37:19Z", Details:map[string]interface {}{"missing_labels":[]interface {}{"test"}}, EventType:"violation_audited", Group:"constraints.gatekeeper.sh", Version:"v1beta1", Kind:"K8sRequiredLabels", Name:"pod-must-have-test", Namespace:"", Message:"you must provide labels: {\\"test\\"}", EnforcementAction:"deny", ConstraintAnnotations:map[string]string(nil), ResourceGroup:"", ResourceAPIVersion:"v1", ResourceKind:"Pod", ResourceNamespace:"nginx", ResourceName:"nginx-deployment-58899467f5-j85bs", ResourceLabels:map[string]string{"app":"nginx", "owner":"admin", "pod-template-hash":"58899467f5"}}\n')))),(0,r.yg)("h3",{id:"quick-start-with-exporting-violations-on-node-storage-using-disk-driver-via-emptydir"},"Quick start with exporting violations on node storage using Disk driver via emptyDir"),(0,r.yg)("h4",{id:"configure-gatekeeper-with-export-enabled-to-disk"},"Configure Gatekeeper with Export enabled to Disk"),(0,r.yg)("ol",null,(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Deploy Gatekeeper with disk export configurations."),(0,r.yg)("p",{parentName:"li"},"Below are the default configurations that enable disk export and add a sidecar container to the Gatekeeper audit pod:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"audit: \n  exportVolume: \n    name: tmp-violations \n    emptyDir: {} \n  exportVolumeMount: \n    path: /tmp/violations \n  exportSidecar: \n    name: reader\n    image: ghcr.io/open-policy-agent/fake-reader:latest\n    imagePullPolicy: Always \n    securityContext: \n      allowPrivilegeEscalation: false \n      capabilities: \n        drop: \n        - ALL \n      readOnlyRootFilesystem: true \n      runAsGroup: 999 \n      runAsNonRoot: true \n      runAsUser: 1000 \n      seccompProfile: \n        type: RuntimeDefault \n    volumeMounts: \n    - mountPath: /tmp/violations \n      name: tmp-violations\n")),(0,r.yg)("admonition",{parentName:"li",type:"warning"},(0,r.yg)("p",{parentName:"admonition"},"The reader sidecar image ",(0,r.yg)("inlineCode",{parentName:"p"},"ghcr.io/open-policy-agent/fake-reader:latest")," and the provided default configurations are intended for demonstration and quickstart purposes only. They are not recommended for production environments. For production use, it is advised to create and configure a custom sidecar image tailored to your specific requirements.")),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"helm upgrade --install gatekeeper gatekeeper/gatekeeper --namespace gatekeeper-system \\\n--set enableViolationExport=true \\\n--set audit.connection=audit-connection \\\n--set audit.channel=audit-channel \\\n--set audit.exportConnection.path=tmp/violations/topics \\\n--set audit.exportConnection.maxAuditResults=3 \\\n--set exportBackend=disk \\\n")),(0,r.yg)("p",{parentName:"li"},"As part of the command above, the ",(0,r.yg)("inlineCode",{parentName:"p"},"Connection")," resource is installed with the following values and defaults:"),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: connection.gatekeeper.sh/v1alpha1\nkind: Connection\nmetadata:\n  name: "audit-connection"\n  namespace: "gatekeeper-system"\nspec:\n  driver: "disk"\n  config:\n    path: "/tmp/violations/topics"\n    maxAuditResults: 3\n    closedConnectionTTL: 600\n')),(0,r.yg)("table",{parentName:"li"},(0,r.yg)("thead",{parentName:"table"},(0,r.yg)("tr",{parentName:"thead"},(0,r.yg)("th",{parentName:"tr",align:"left"},"Property"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Description"),(0,r.yg)("th",{parentName:"tr",align:"left"},"Default"))),(0,r.yg)("tbody",{parentName:"table"},(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"path"),(0,r.yg)("td",{parentName:"tr",align:"left"},"(alpha) Path for audit pod manager container to export violations and sidecar container to read from. Must be a child of volume mount path so the parent is writable."),(0,r.yg)("td",{parentName:"tr",align:"left"},'"/tmp/violations/topics"')),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"maxAuditResults"),(0,r.yg)("td",{parentName:"tr",align:"left"},"(alpha) Maximum number of audit results that can be stored in the export path."),(0,r.yg)("td",{parentName:"tr",align:"left"},"3")),(0,r.yg)("tr",{parentName:"tbody"},(0,r.yg)("td",{parentName:"tr",align:"left"},"closedConnectionTTL"),(0,r.yg)("td",{parentName:"tr",align:"left"},"(alpha) TTL in seconds for connection to be in the retry queue after it is closed/deleted in case of failure."),(0,r.yg)("td",{parentName:"tr",align:"left"},"600")))),(0,r.yg)("p",{parentName:"li"},(0,r.yg)("strong",{parentName:"p"},"Note"),": After the audit pod starts, verify that it contains two running containers."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-shell"},"kubectl get pod -n gatekeeper-system \nNAME                                             READY   STATUS    RESTARTS        AGE\ngatekeeper-audit-6865f5f56d-vclxw                2/2     Running   0               12s\n")),(0,r.yg)("admonition",{parentName:"li",type:"tip"},(0,r.yg)("p",{parentName:"admonition"},"The command above deploys the audit pod with a default sidecar reader and volume. To customize the sidecar reader or volume according to your requirements, you can set the following variables in your values.yaml file:"),(0,r.yg)("pre",{parentName:"admonition"},(0,r.yg)("code",{parentName:"pre",className:"language-yaml"},"audit: \n  exportVolume: \n    <your-volume>\n  exportVolumeMount: \n    path: <volume-mount-path>\n  exportSidecar: \n    <your-side-car>\n")))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Create the constraint templates and constraints, and make sure audit ran by checking constraints. If constraint status is updated with information such as ",(0,r.yg)("inlineCode",{parentName:"p"},"auditTimeStamp")," or ",(0,r.yg)("inlineCode",{parentName:"p"},"totalViolations"),", then audit has ran at least once. Additionally, populated ",(0,r.yg)("inlineCode",{parentName:"p"},"TOTAL-VIOLATIONS")," field for all constraints while listing constraints also indicates that audit has ran at least once."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-log"},"kubectl get constraint\nNAME                 ENFORCEMENT-ACTION   TOTAL-VIOLATIONS\npod-must-have-test                        0\n"))),(0,r.yg)("li",{parentName:"ol"},(0,r.yg)("p",{parentName:"li"},"Finally, check the sidecar reader logs to see the violations written."),(0,r.yg)("pre",{parentName:"li"},(0,r.yg)("code",{parentName:"pre",className:"language-log"},'kubectl logs -l gatekeeper.sh/operation=audit -c go-sub -n gatekeeper-system \n2025/03/05 00:37:16 {"id":"2025-03-05T00:37:13Z","details":{"missing_labels":["test"]},"eventType":"violation_audited","group":"constraints.gatekeeper.sh","version":"v1beta1","kind":"K8sRequiredLabels","name":"pod-must-have-test","message":"you must provide labels: {\\"test\\"}","enforcementAction":"deny","resourceAPIVersion":"v1","resourceKind":"Pod","resourceNamespace":"nginx","resourceName":"nginx-deployment-2-79479fc6db-7qbnm","resourceLabels":{"app":"nginx-ingress","app.kubernetes.io/component":"controller","pod-template-hash":"79479fc6db"}}\n')))),(0,r.yg)("h3",{id:"violations"},"Violations"),(0,r.yg)("p",null,"The audit pod exports violations in following format:"),(0,r.yg)("pre",null,(0,r.yg)("code",{parentName:"pre",className:"language-json"},'{\n  "id": "2023-07-18T21:21:52Z",\n  "details": {\n    "missing_labels": [\n      "test"\n    ]\n  },\n  "eventType": "violation_audited",\n  "group": "constraints.gatekeeper.sh",\n  "version": "v1beta1",\n  "kind": "K8sRequiredLabels",\n  "name": "pod-must-have-test",\n  "message": "you must provide labels: {\\"test\\"}",\n  "enforcementAction": "deny",\n  "resourceAPIVersion": "v1",\n  "resourceKind": "Pod",\n  "resourceNamespace": "nginx",\n  "resourceName": "nginx-deployment-cd55c47f5-2b84x",\n  "resourceLabels": {\n    "app": "nginx",\n    "pod-template-hash": "cd55c47f5"\n  }\n}\n')))}g.isMDXComponent=!0}}]);