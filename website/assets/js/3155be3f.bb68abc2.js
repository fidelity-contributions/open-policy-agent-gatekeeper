"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[34349],{15680:(e,n,t)=>{t.d(n,{xA:()=>p,yg:()=>g});var r=t(96540);function o(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function i(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function a(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?i(Object(t),!0).forEach((function(n){o(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):i(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function c(e,n){if(null==e)return{};var t,r,o=function(e,n){if(null==e)return{};var t,r,o={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(o[t]=e[t]);return o}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var s=r.createContext({}),d=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):a(a({},n),e)),t},p=function(e){var n=d(e.components);return r.createElement(s.Provider,{value:n},e.children)},l={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},u=r.forwardRef((function(e,n){var t=e.components,o=e.mdxType,i=e.originalType,s=e.parentName,p=c(e,["components","mdxType","originalType","parentName"]),u=d(t),g=o,f=u["".concat(s,".").concat(g)]||u[g]||l[g]||i;return t?r.createElement(f,a(a({ref:n},p),{},{components:t})):r.createElement(f,a({ref:n},p))}));function g(e,n){var t=arguments,o=n&&n.mdxType;if("string"==typeof e||o){var i=t.length,a=new Array(i);a[0]=u;var c={};for(var s in n)hasOwnProperty.call(n,s)&&(c[s]=n[s]);c.originalType=e,c.mdxType="string"==typeof e?e:o,a[1]=c;for(var d=2;d<i;d++)a[d]=t[d];return r.createElement.apply(null,a)}return r.createElement.apply(null,t)}u.displayName="MDXCreateElement"},39373:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>p,contentTitle:()=>s,default:()=>g,frontMatter:()=>c,metadata:()=>d,toc:()=>l});var r=t(58168),o=t(98587),i=(t(96540),t(15680)),a=["components"],c={id:"export-driver",title:"Export Interface/Driver walkthrough"},s=void 0,d={unversionedId:"export-driver",id:"version-v3.19.x/export-driver",title:"Export Interface/Driver walkthrough",description:"This guide provides an overview of the driver interface, including details of its structure and functionality. Additionally, it offers instructions on adding a new driver and utilizing different backends to export audit violations.",source:"@site/versioned_docs/version-v3.19.x/export-driver-walkthrough.md",sourceDirName:".",slug:"/export-driver",permalink:"/gatekeeper/website/docs/v3.19.x/export-driver",draft:!1,editUrl:"https://github.com/open-policy-agent/gatekeeper/edit/master/website/versioned_docs/version-v3.19.x/export-driver-walkthrough.md",tags:[],version:"v3.19.x",frontMatter:{id:"export-driver",title:"Export Interface/Driver walkthrough"},sidebar:"docs",previous:{title:"Security",permalink:"/gatekeeper/website/docs/v3.19.x/security"}},p={},l=[{value:"Driver interface",id:"driver-interface",level:2},{value:"How to add new driver to export audit violations to foo backend",id:"how-to-add-new-driver-to-export-audit-violations-to-foo-backend",level:3},{value:"How to establish connections to different backend",id:"how-to-establish-connections-to-different-backend",level:3}],u={toc:l};function g(e){var n=e.components,t=(0,o.A)(e,a);return(0,i.yg)("wrapper",(0,r.A)({},u,t,{components:n,mdxType:"MDXLayout"}),(0,i.yg)("p",null,"This guide provides an overview of the driver interface, including details of its structure and functionality. Additionally, it offers instructions on adding a new driver and utilizing different backends to export audit violations."),(0,i.yg)("h2",{id:"driver-interface"},"Driver interface"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"type Driver interface {\n    // Publish publishes single message with specific subject using a connection\n    Publish(ctx context.Context, connectionName string, data interface{}, subject string) error\n\n    // CloseConnection closes a connection\n    CloseConnection(connectionName string) error\n\n    // UpdateConnection updates an existing connection\n    UpdateConnection(ctx context.Context, connectionName string, config interface{}) error\n\n    // CreateConnection creates new connection\n    CreateConnection(ctx context.Context, connectionName string, config interface{}) error\n}\n")),(0,i.yg)("p",null,"As an example, the Dapr driver implements these methods to publish message and manage connection to do so. Please refer to ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/open-policy-agent/gatekeeper/blob/master/pkg/export/dapr/dapr.go"},"dapr.go")," to understand the logic that goes in each of these methods."),(0,i.yg)("h3",{id:"how-to-add-new-driver-to-export-audit-violations-to-foo-backend"},"How to add new driver to export audit violations to foo backend"),(0,i.yg)("p",null,"A driver must maintain a map of open connections associated with backend ",(0,i.yg)("inlineCode",{parentName:"p"},"foo"),"."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},'type Connection struct {\n    // properties needed for individual connection\n}\n\ntype Foo struct {\n    openConnections map[string]Connection\n}\n\nconst (\n    Name = "foo"\n)\n\nvar Connections = &Foo{\n    openConnections: make(map[string]Connection),\n}\n\n')),(0,i.yg)("p",null,"A driver must implement the ",(0,i.yg)("inlineCode",{parentName:"p"},"Driver")," interface."),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"func (r *Foo) Publish(ctx context.Context, connectionName string, data interface{}, subject string) error {\n  ...\n}\n\nfunc (r *Foo) loseConnection(connectionName string) error {\n  ...\n}\n\nfunc (r *Foo) UpdateConnection(ctx context.Context, connectionName string, config interface{}) error {\n  ...\n}\n\nfunc (r *Foo) CreateConnection(ctx context.Context, connectionName string, config interface{}) error {\n  ...\n}\n")),(0,i.yg)("p",null,"This newly added driver's ",(0,i.yg)("inlineCode",{parentName:"p"},"Connections")," exported variable must be added to the map of ",(0,i.yg)("inlineCode",{parentName:"p"},"SupportedDrivers")," in ",(0,i.yg)("a",{parentName:"p",href:"https://github.com/open-policy-agent/gatekeeper/blob/master/pkg/export/provider/system.go"},"system.go"),". For example,"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-go"},"var SupportedDrivers = map[string]driver.Driver{\n    dapr.Name: dapr.Connections,\n  foo.Name: foo.Connections,\n}\n")),(0,i.yg)("p",null,"And thats it! Exporter system will take the newly added driver into account and whenever a configMap to establish connection to export message is created."),(0,i.yg)("h3",{id:"how-to-establish-connections-to-different-backend"},"How to establish connections to different backend"),(0,i.yg)("p",null,"To enable audit to use this driver to publish messages, a connection configMap with appropriate ",(0,i.yg)("inlineCode",{parentName:"p"},"config")," and ",(0,i.yg)("inlineCode",{parentName:"p"},"driver")," is needed. For example,"),(0,i.yg)("pre",null,(0,i.yg)("code",{parentName:"pre",className:"language-yaml"},'apiVersion: v1\nkind: ConfigMap\nmetadata:\n  name: audit\n  namespace: gatekeeper-system\ndata:\n  driver: "foo"\n  config: |\n    {\n      <config needed for foo connection>\n    }\n')),(0,i.yg)("blockquote",null,(0,i.yg)("p",{parentName:"blockquote"},"The ",(0,i.yg)("inlineCode",{parentName:"p"},"data.driver")," field must exist and must match one of the keys of the ",(0,i.yg)("inlineCode",{parentName:"p"},"SupportedDrivers")," map that was defined earlier to use the corresponding driver. The ",(0,i.yg)("inlineCode",{parentName:"p"},"data.config")," field in the configuration can vary depending on the driver being used. For dapr driver, ",(0,i.yg)("inlineCode",{parentName:"p"},"data.config")," must be ",(0,i.yg)("inlineCode",{parentName:"p"},'{"component": "pubsub"}'),".")))}g.isMDXComponent=!0}}]);